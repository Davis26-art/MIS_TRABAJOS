#--------------------------------------------------
# EJERCICIO 27 -- Comparaci√≥n de b√∫squedas (n√∫meros vs palabras)
#--------------------------------------------------

def busqueda_binaria_palabra(lista, palabra_buscada):
    """
    Implementa b√∫squeda binaria para encontrar una palabra
    La lista debe estar ordenada alfab√©ticamente
    """
    izquierda = 0                       # √çndice inicial (comienza en la primera posici√≥n de la lista)
    derecha = len(lista) - 1            # √çndice final (√∫ltima posici√≥n de la lista)
    iteraciones = 0                     # Contador de cu√°ntas veces se repite el ciclo

    print(f"Buscando '{palabra_buscada}' en: {lista}")
    print("\nProceso de b√∫squeda:")

    # Mientras el rango sea v√°lido (izquierda no sobrepase a derecha)
    while izquierda <= derecha:
        iteraciones += 1
        medio = (izquierda + derecha) // 2   # Divisi√≥n entera ‚Üí posici√≥n intermedia de la lista
        palabra_medio = lista[medio]         # Elemento que est√° en la posici√≥n media

        # Mostramos informaci√≥n de la iteraci√≥n actual
        print(f"\nIteraci√≥n {iteraciones}:")
        print(f" Rango: posiciones {izquierda} a {derecha}")
        print(f" Medio: posici√≥n {medio}, valor '{palabra_medio}'")

        # Caso 1: encontramos la palabra exacta
        if palabra_medio == palabra_buscada:
            print(f" ‚úÖ ¬°Encontrado! '{palabra_buscada}' est√° en posici√≥n {medio}")
            return medio

        # Caso 2: la palabra que buscamos est√° a la "derecha" (alfab√©ticamente mayor)
        elif palabra_medio < palabra_buscada:
            print(f" üîé '{palabra_medio}' < '{palabra_buscada}', buscar en mitad derecha")
            izquierda = medio + 1   # Movemos el l√≠mite izquierdo a la derecha del medio

        # Caso 3: la palabra que buscamos est√° a la "izquierda" (alfab√©ticamente menor)
        else:
            print(f" üîé '{palabra_medio}' > '{palabra_buscada}', buscar en mitad izquierda")
            derecha = medio - 1     # Movemos el l√≠mite derecho a la izquierda del medio

    # Si el ciclo termina, significa que no encontramos la palabra
    print(f"\n‚ùå '{palabra_buscada}' no est√° en la lista")
    print(f"Total de iteraciones: {iteraciones}")
    return -1

def busqueda_lineal_palabra(lista, palabra_buscada):
    """B√∫squeda lineal para comparar eficiencia"""
    comparaciones = 0                     # Contador de comparaciones
    for i in range(len(lista)):           # Recorremos toda la lista elemento por elemento
        comparaciones += 1
        if lista[i] == palabra_buscada:   # Si encontramos la palabra
            return i, comparaciones       # Devolvemos la posici√≥n y las comparaciones hechas
    return -1, comparaciones              # Si no se encuentra, devolvemos -1

# Probando las b√∫squedas
palabras_ordenadas = ["amarillo", "azul", "blanco", "morado", "negro", "rojo", "rosa", "verde"]
buscar = "rojo"

print("COMPARACI√ìN DE ALGORITMOS DE B√öSQUEDA (PALABRAS)")
print("=" * 55)
print("Lista ordenada:", palabras_ordenadas)
print(f"Palabra a buscar: '{buscar}'")

# B√∫squeda binaria
print("\n1. B√öSQUEDA BINARIA:")
print("-" * 30)
posicion_binaria = busqueda_binaria_palabra(palabras_ordenadas, buscar)

# B√∫squeda lineal
print("\n2. B√öSQUEDA LINEAL:")
print("-" * 30)
posicion_lineal, comparaciones_lineales = busqueda_lineal_palabra(palabras_ordenadas, buscar)
print(f"B√∫squeda lineal: {comparaciones_lineales} comparaciones")
if posicion_lineal != -1:
    print(f"Elemento encontrado en posici√≥n {posicion_lineal}")

print(f"\nüìå Ventaja de b√∫squeda binaria: Menos comparaciones en listas grandes")
